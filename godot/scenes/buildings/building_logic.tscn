[gd_scene load_steps=2 format=3 uid="uid://dk2qrdg5vsu6i"]

[sub_resource type="GDScript" id="GDScript_qjm32"]
script/source = "extends Node2D

@onready var interaction_area = get_parent().get_node(\"InteractionArea\")
@onready var off_screen_indicator = get_parent().get_node(\"OffScreenIndicator\")

enum BuildingType {
	DELIVER,
	RECEIVE
}

@export var building_type: int

func _ready():
	if building_type == BuildingType.DELIVER:
		interaction_area.interact = Callable(self, \"_hand_over_package\")
	elif building_type == BuildingType.RECEIVE:
		interaction_area.interact = Callable(self, \"_receive_package\")
		
	off_screen_indicator.connect(\"indicator_inbound\", _on_indicator_inbound)
	off_screen_indicator.connect(\"indicator_outbound\", _on_indicator_outbound)

func _process(_delta):
	# the indicator display logic also depends the type of building the node is on
	# if the player has the package, hide the off screen indicator
	_determine_indicator_display(building_type)

func _determine_indicator_display(_building_type: int) -> void:
	if _building_type == BuildingType.DELIVER:
		if GameParamsManager._get_player_package():
			off_screen_indicator.hide()
		else:
			off_screen_indicator.show()
	elif _building_type == BuildingType.RECEIVE:
		if GameParamsManager._get_player_package():
			off_screen_indicator.show()
		else:
			off_screen_indicator.hide()

func _hand_over_package() -> void:
	GameParamsManager._set_player_package(true)

func _receive_package() -> void:
	GameParamsManager._set_player_package(false)

# the indicator is hidden regardless of package
func _on_indicator_inbound():
	off_screen_indicator.hide()

# the indicator is shown to player, unless the package has been collected.
func _on_indicator_outbound():
	_determine_indicator_display(building_type)
"

[node name="BuildingLogic" type="Node2D"]
script = SubResource("GDScript_qjm32")
